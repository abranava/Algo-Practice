Link: https://www.codewars.com/kata/5866a58b9cbc02c4f8000cac/train/javascript

The game
In this game, there are 21 sticks lying in a pile. Players take turns taking 1, 2, or 3 sticks. The last person to take a stick wins. For example:

21 sticks in the pile

Bob takes 2  -->  19 sticks left
Jim takes 3  -->  16 sticks
Bob takes 3  -->  13 sticks
Jim takes 1  -->  12 sticks
Bob takes 2  -->  10 sticks
Jim takes 2  -->   8 sticks
Bob takes 3  -->   5 sticks
Jim takes 3  -->   2 sticks
Bob takes 2  -->  Bob wins!
Your task
Create a robot that will always win the game. Your robot will always go first. The function should take an integer and returns 1, 2, or 3.

Note: The input will always be valid (a positive integer)

Hint: https://youtu.be/9KABcmczPdg

Provided code:
function makeMove(sticks) {
  // TODO
}

Sample Test:
const {assert} = require('chai');

describe('Tests', () => {
  it('Sample Tests', () => {
    const legalMoves = [1, 2, 3];
    for (let sticks = 1; sticks <= 3; sticks++) {
      const actual = makeMove(sticks);
      assert.oneOf(actual, legalMoves, `Illegal move for sticks = ${sticks}`);
      assert.strictEqual(actual, sticks, `Suboptimal move for sticks = ${sticks}`);
    }
  });
});

Solution:
/**
 * Decides the number of sticks to remove.
 * @param {number} sticks - The number of sticks currently in play.
 * @return {number} - The number of sticks to remove.
 */
function makeMove(sticks) {
    // Calculate the remainder when sticks is divided by 4
    let remainder = sticks % 4;

    // If remainder is 0, it means we're already at a multiple of 4
    // In this case, remove 1 stick to try to break the AI's strategy
    if (remainder === 0) {
        return 1;
    } else {
        // Otherwise, remove enough sticks to bring the total down to the next multiple of 4
        return remainder;
    }
}

// Sample tests provided
const {assert} = require('chai');

describe('Tests', () => {
    it('Sample Tests', () => {
        const legalMoves = [1, 2, 3];
        for (let sticks = 1; sticks <= 3; sticks++) {
            const actual = makeMove(sticks);
            assert.oneOf(actual, legalMoves, `Illegal move for sticks = ${sticks}`);
            assert.strictEqual(actual, sticks, `Suboptimal move for sticks = ${sticks}`);
        }
    });
});


Explanation:

Strategic function for deciding the number of sticks to remove in a game.
The strategy aims to leave the opponent with a multiple of 4 sticks,forcing them into a losing position.

 * @param {number} sticks - The current number of sticks in the game.
 * @return {number} - The optimal number of sticks to remove.

function makeMove(sticks) {
    let remainder = sticks % 4;
    return remainder === 0 ? 1 : remainder;
}
The function calculates the remainder of sticks divided by 4.
If the remainder is 0 (sticks are a multiple of 4), it removes 1 stick.
This move attempts to disrupt the AI's strategy.
If the remainder is not 0, it removes a number of sticks equal to the remainder.
This ensures the total sticks left are a multiple of 4, giving an advantage.
